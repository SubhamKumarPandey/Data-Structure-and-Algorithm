#include <bits/stdc++.h>
using namespace std;
class Solution
{
    public:
    vector <int> maxOfMin(int arr[], int n)
    {
         stack<int> s; 
        int left[n + 1];
        int right[n + 1];
        for (int i = 0; i < n; i++) {
            left[i] = -1;
            right[i] = n;
        }
        for (int i = 0; i < n; i++)
        {
            while (!s.empty() && arr[s.top()] >= arr[i])
            s.pop();
            
            if (!s.empty()) 
            left[i] = s.top();
            s.push(i);
        }
        while (!s.empty())
        s.pop();
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && arr[s.top()] >= arr[i])
            s.pop();
    
            if (!s.empty()) 
            right[i] = s.top();
            s.push(i);
        }
        int ans[n + 1];
        for (int i = 0; i <= n; i++) ans[i] = 0;
        for (int i = 0; i < n; i++) 
        {
           
            int len = right[i] - left[i] - 1;
            ans[len] = max(ans[len], arr[i]);
        }
        for (int i = n - 1; i >= 1; i--) 
        ans[i] = max(ans[i], ans[i + 1]);
    
        vector <int> res (n);
        for (int i = 1; i <= n; i++) 
        res[i-1] = ans[i];
        return res;
    }
};
int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) cin >> a[i];
        Solution ob;
        vector <int> res = ob.maxOfMin(a, n);
        for (int i : res) cout << i << " ";
        cout << endl;
    }
    return 0;
}

/*

N = 7
arr[] = {10,20,30,50,10,70,30}
Output: 70 30 20 10 10 10 10 
Explanation: First element in output
indicates maximum of minimums of all
windows of size 1. Minimums of windows
of size 1 are {10}, {20}, {30}, {50},
{10}, {70} and {30}. Maximum of these
minimums is 70. 
Second element in output indicates
maximum of minimums of all windows of
size 2. Minimums of windows of size 2
are {10}, {20}, {30}, {10}, {10}, and
{30}. Maximum of these minimums is 30 
Third element in output indicates
maximum of minimums of all windows of
size 3. Minimums of windows of size 3
are {10}, {20}, {10}, {10} and {10}.
Maximum of these minimums is 20. 
Similarly other elements of output are
computed.

*/