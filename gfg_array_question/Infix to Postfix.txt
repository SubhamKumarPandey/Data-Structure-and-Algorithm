#include<bits/stdc++.h>
using namespace std;
class Solution
{
    public:
        bool isoperand(char c){
        if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
        return true;
        return false;
    }
    
    int prec(char a){
        if(a=='(') return 1;
        if(a=='+' || a=='-') return 2;
        if(a=='*' || a=='/') return 3;
        if(a=='^') return 4;
    }
    string infixToPostfix(string s)
    {
       stack<char>st;
       string res;
       for(int i=0;i<s.size();i++){
           if(isoperand(s[i])){
               res+=s[i];
           }
           else if(s[i]=='(')
           st.push(s[i]);
           else if(s[i]==')'){
               while(!st.empty() && st.top()!='('){
                   res+=st.top();
                   st.pop();
               }
               if(st.top()=='(')
                st.pop();
           }
           
           else if(st.empty())
           st.push(s[i]);
           else{
                   while(!st.empty() && prec(st.top())>=prec(s[i])){
                       res+=st.top();
                       st.pop();
                   }
                   st.push(s[i]);
           }
       }
           while(!st.empty()){
               res+=st.top();
               st.pop();
           }
       
       return res;
    }
};
int main()
{
    int t;
    cin>>t;
    cin.ignore(INT_MAX, '\n');
    while(t--)
    {
        string exp;
        cin>>exp;
        Solution ob;
        cout<<ob.infixToPostfix(exp)<<endl;
    }
    return 0;
}

/*

Input: str = "a+b*(c^d-e)^(f+g*h)-i"
Output: abcd^e-fgh*+^*+i-
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be abcd^e-fgh*+^*+i-

*/